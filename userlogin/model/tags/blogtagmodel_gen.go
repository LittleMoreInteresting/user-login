// Code generated by goctl. DO NOT EDIT!

package tags

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	blogTagFieldNames          = builder.RawFieldNames(&BlogTag{})
	blogTagRows                = strings.Join(blogTagFieldNames, ",")
	blogTagRowsExpectAutoSet   = strings.Join(stringx.Remove(blogTagFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	blogTagRowsWithPlaceHolder = strings.Join(stringx.Remove(blogTagFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheBlogTagIdPrefix = "cache:blogTag:id:"
)

type (
	blogTagModel interface {
		Insert(ctx context.Context, data *BlogTag) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BlogTag, error)
		Update(ctx context.Context, data *BlogTag) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBlogTagModel struct {
		sqlc.CachedConn
		table string
	}

	BlogTag struct {
		Id    int64  `db:"id"`
		Name  string `db:"name"`  // 标签名称
		State int64  `db:"state"` // 状态 1 为启用、2为禁用、3删除
	}
)

func newBlogTagModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultBlogTagModel {
	return &defaultBlogTagModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`blog_tag`",
	}
}

func (m *defaultBlogTagModel) Delete(ctx context.Context, id int64) error {
	blogTagIdKey := fmt.Sprintf("%s%v", cacheBlogTagIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, blogTagIdKey)
	return err
}

func (m *defaultBlogTagModel) FindOne(ctx context.Context, id int64) (*BlogTag, error) {
	blogTagIdKey := fmt.Sprintf("%s%v", cacheBlogTagIdPrefix, id)
	var resp BlogTag
	err := m.QueryRowCtx(ctx, &resp, blogTagIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", blogTagRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBlogTagModel) Insert(ctx context.Context, data *BlogTag) (sql.Result, error) {
	blogTagIdKey := fmt.Sprintf("%s%v", cacheBlogTagIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, blogTagRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.State)
	}, blogTagIdKey)
	return ret, err
}

func (m *defaultBlogTagModel) Update(ctx context.Context, data *BlogTag) error {
	blogTagIdKey := fmt.Sprintf("%s%v", cacheBlogTagIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, blogTagRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.State, data.Id)
	}, blogTagIdKey)
	return err
}

func (m *defaultBlogTagModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheBlogTagIdPrefix, primary)
}

func (m *defaultBlogTagModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", blogTagRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBlogTagModel) tableName() string {
	return m.table
}
